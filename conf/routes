# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           controllers.Home.index


####################### SECURE SOCIAL ###################################

# Login page
GET     /login                      securesocial.controllers.LoginPage.login
GET     /logout                     securesocial.controllers.LoginPage.logout

# User Registration and password handling
GET     /signup                     securesocial.controllers.Registration.startSignUp
POST    /signup                     securesocial.controllers.Registration.handleStartSignUp
GET     /signup/:token              securesocial.controllers.Registration.signUp(token)
POST    /signup/:token              securesocial.controllers.Registration.handleSignUp(token)
GET     /reset                      securesocial.controllers.Registration.startResetPassword
POST    /reset                      securesocial.controllers.Registration.handleStartResetPassword
GET     /reset/:token               securesocial.controllers.Registration.resetPassword(token)
POST    /reset/:token               securesocial.controllers.Registration.handleResetPassword(token)
GET     /password                   securesocial.controllers.PasswordChange.page
POST    /password                   securesocial.controllers.PasswordChange.handlePasswordChange

# Providers entry points
GET     /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)
POST    /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)
GET     /not-authorized             securesocial.controllers.ProviderController.notAuthorized

####################### END SECURE SOCIAL ###############################

# Authentication (redirectTo not in routes, to use as a querystring param)
#GET     /login                      controllers.Authentication.login(redirectTo: Option[String] ?= None)
#POST    /login                      controllers.Authentication.authenticate(redirectTo: Option[String])
#GET     /logout                     controllers.Authentication.logout

# Account
#GET     /account/register                   controllers.Account.register
#POST    /account/register                   controllers.Account.createAccount
#GET     /account/created                    controllers.Account.accountCreated(username:String)
#GET     /account/activate                   controllers.Account.activateAccount(name : String, token : String)

# Lang
POST    /setLocale                          controllers.Localise.changeLocale

# playing
GET     /rooms/:roomId/games/current            controllers.Gaming.currentGame(roomId : String)
GET     /rooms/:roomId/games/:gameId            controllers.Gaming.getGame(roomId : String, gameId : String)
GET     /rooms/:roomId/games/:gameId/status     controllers.Gaming.gameStatus(roomId : String, gameId : String)
GET     /rooms/:roomId/games/:gameId/scores     controllers.Gaming.gameScores(roomId : String, gameId : String)
POST    /rooms/:roomId/games/:gameId/solution   controllers.Gaming.submitSolution(roomId : String, gameId : String)

POST    /rooms/:roomId/eject                            controllers.Gaming.eject(roomId, redirectTo: Option[String] ?= None)
GET     /rooms/:roomId/connect/:player                  controllers.Gaming.connectPlayer(roomId : String, player: String)


# ADMINISTRATOR FEATURES ... or debugging ...
# admin home ... with and without slash
GET     /admin                                    controllers.Home.adminIndex

# boards ... with and without slash
GET     /admin/boards                             controllers.Boards.index
GET     /admin/boards/:boardId                    controllers.Boards.preview(boardId : Long)

# rooms
GET     /admin/rooms/:roomName/games              controllers.Rooms.gamesByRoom(roomName: String)
GET     /admin/rooms/:roomName/games/:gameId      controllers.Rooms.previewGame(roomName: String, gameId : String)

# db management
# GET     /admin/reset                           controllers.Admin.reset
# GET     /admin/userList                        controllers.Admin.listUser


# APPLICATION WIDE ROUTES

# Javascript routing
GET     /assets/javascripts/routes.js          controllers.Application.javascriptRoutes

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
